{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","className","Typography","variant","to","AppLink","Box","m","Grid","container","alignItems","justify","spacing","item","overlay","onClick","window","location","href","hash","reload","App","path","direction","component","withBounceWipe","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8472780e.chunk.js","sourcesContent":["import Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\nimport './App.css';\nimport {\n  ClockWipe,\n  DiagonalWipe,\n  HorizontalWipe,\n  ScaleWipe,\n  SplitHorizontalWipe,\n  SplitVerticalWipe,\n  StarWipe,\n  TransitionLink,\n  VerticalWipe,\n  withBounceWipe,\n} from 'react-wipes/dist'\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n          <Route path=\"/diagonal\">\n            <DiagonalWipe>\n              <Home />\n            </DiagonalWipe>\n          </Route>\n          <Route path=\"/vertical\">\n              <VerticalWipe>\n                <Home />\n              </VerticalWipe>\n          </Route>\n          <Route path=\"/split-vertical\">\n              <SplitVerticalWipe>\n                <Home />\n              </SplitVerticalWipe>\n          </Route>\n          <Route path=\"/horizontal\">\n              <HorizontalWipe>\n                <Home />\n              </HorizontalWipe>\n          </Route>\n          <Route path=\"/horizontal-reverse\">\n            <HorizontalWipe direction='reverse'>\n              <Home />\n            </HorizontalWipe>\n          </Route>\n          <Route path=\"/split-horizontal\">\n              <SplitHorizontalWipe>\n                <Home />\n              </SplitHorizontalWipe>\n          </Route>\n          <Route path=\"/scale-up\">\n              <ScaleWipe>\n                <Home />\n              </ScaleWipe>\n          </Route>\n          <Route path=\"/star-wipe\">\n              <StarWipe>\n                <Home />\n              </StarWipe>\n          </Route>\n          <Route component={withBounceWipe(Home)} path=\"/bounce\" />\n          <Route path=\"/clock-wipe\">\n            <ClockWipe>\n              <Home />\n            </ClockWipe>\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n    </Router>\n  );\n}\nfunction Home() {\n  return (\n    <div className=\"App-header\">\n      <Typography variant=\"h1\">React Wipes</Typography>\n      <Typography variant=\"h2\">Github</Typography>\n      <TransitionLink\n        className=\"App-link\"\n        to=\"https://github.com/rhigdon/react-wipes\"\n      >https://github.com/rhigdon/react-wipes</TransitionLink>\n      <Typography variant=\"h2\">Install</Typography>\n      <Typography variant=\"h3\">npm i react-wipes</Typography>\n      <Typography variant=\"h2\">Examples</Typography>\n      <AppLink to=\"clock-wipe\">Clock Wipe</AppLink>\n      <AppLink to=\"star-wipe\">Star Wipe</AppLink>\n      <AppLink to=\"scale-up\">Scale Up</AppLink>\n      <AppLink to=\"vertical\">Vertical</AppLink>\n      <AppLink to=\"split-vertical\">Split Vertical</AppLink>\n      <AppLink to=\"diagonal\">Diagonal</AppLink>\n      {/**\n      <Link className=\"App-link\" to=\"/diagonal\">Split Diagonal</Link>\n      */}\n      <AppLink to=\"horizontal\">Horizontal</AppLink>\n      <AppLink to=\"horizontal-reverse\">Horizontal Reverse</AppLink>\n      <AppLink to=\"split-horizontal\">Split Horizontal</AppLink>\n      <AppLink to=\"bounce\">Bounce</AppLink>\n      {/**\n        <Link className=\"App-link\" to=\"/next\">Matrix</Link>\n        <Link className=\"App-link\" to=\"/next\">Heart</Link>\n      */}\n      <Box m={5}>\n        <Grid container alignItems=\"baseline\" justify=\"center\" spacing={1}>\n          <Grid item>\n            <Typography>Made with ‚ù§ by</Typography>\n          </Grid>\n          <Grid item>\n            <TransitionLink\n              overlay=\"scale\"\n              className=\"App-link\"\n              to=\"https://ryanhigdon.com\"\n            >Ryan Higdon</TransitionLink>\n          </Grid>\n        </Grid>\n      </Box>\n    </div>\n  )\n}\n\nfunction AppLink({to}) {\n  return (\n    <Link className=\"App-link\" onClick={()=>{\n      window.location.href=\"/react-wipes#\"+to\n      if (window.location.hash === (\"#\" + to)) {\n        window.location.reload()\n      }\n    }} to={to}>{to}</Link>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}